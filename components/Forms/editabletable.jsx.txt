import React from 'react';
import { Table, Input, InputNumber, Popconfirm, Form, Select } from 'antd';

const EditableContext = React.createContext();

class EditableCell extends React.Component{

    getInput = (inputType) => {
        switch(inputType) {
            case 'number':
                return <InputNumber />;
            // case 'select':
            //     return <Select></Select>
            case 'text' :
            case 'default':
                return <Input />
        }
    }
    renderCell = ({getFieldDecorator}) => {
        const {
            editing,
            dataIndex,
            title,
            inputType,
            record,
            index,
            children,
            ...restProps
        } = this.props;

        return (
            <td {...restProps}>
                {editing ? (
                    <Form.Item style={{margin: 0}} >
                        {getFieldDecorator(dataIndex, {
                            rules: [
                                {
                                    required: true,
                                    message: `Please Input ${title}`
                                },
                            ],
                            initialValue: record[dataIndex]
                        })(this.getInput(inputType))}
                    </Form.Item>
                ) : (children)
                }
            </td>
        )
    }

    render() {
        return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>
    }
}

class EditableTable extends React.Component{
    constructor(props) {
        super(props)
        this.state = {
            editingKey: ''
        }
    
        const {deleteItem, columns} = this.props

        this.data= this.props.data

        this.columns = [
            ...columns,
            {
                title: 'Actions',
                key: 'actions',
                render:(text, record) => {
                    const {editingKey} = this.state;
                    const editable = this.isEditing(record)
                    return editable ? (
                        <span>
                            <EditableContext.Consumer>
                                {form => (
                                    <a href="javascript:;" onClick={() => this.save(form, record.id)} style={{marginRight: 8}}>Save</a>
                                    )}
                            </EditableContext.Consumer>
                            <a onClick={() => this.cancel(record.id)}>Cancel</a>
                        
                        </span>
                    ): (<span>
                        <a disabled={editingKey !== ''} onClick={() => this.edit(record.id)} style={{marginRight: 10}}>Edit</a>
                        <Popconfirm 
                            title="Are you sure delete this invoice?"
                            onConfirm ={() => deleteItem(record.id)}
                            // onCancel={cancel}
                            okText="Yes"
                            cancelText="No"
                        >
                            <a disabled={editingKey !== ''} href="# ">Delete</a>
                        </Popconfirm>
                        </span>
                    )
                }
            }
        ]

    }

    isEditing = record => record.id === this.state.editingKey;

    edit = id => {
        console.log('key', id)
        this.setState({editingKey:id});
    };

    cancel = () => {
        this.setState({editingKey:''});
    };

    save(form, id){
        form.validateFields((error, row) => {
            if(error) {return;}

            const newData = [...this.data];
            const index = newData.findIndex(item => id === item.id);
    
            if (index > -1) {
                const item = newData[index];
                newData.splice(index, 1, { ...item, ...row });
                this.setState({data: newData, editingKey: ''})
                this.data = newData
            } else {
                newData.push(row);
                this.setState({data: newData, editingKey: ''})
                this.data = newData
            }

            this.props.onSaveItem(id, newData[index])
        });
    }
    
    render() {

        const components = {
            body: {
            cell: EditableCell,
            },
        };
    
        const columns = this.columns.map(col => {
            if (!col.editable) {
            return col;
            }
    
            return {
                ...col,
                onCell: record => ({
                    record,
                    inputType: 'text',//col.dataIndex === 'practitioner' ? 'select' : col.dataIndex === 'number',
                    dataIndex: col.dataIndex,
                    title: col.title,
                    editing: this.isEditing(record)
                })
            };
        });

        const {rowSelection, data} = this.props
        return (
            <EditableContext.Provider value={this.props.form}>
                <Table
                    components={components}
                    rowSelection={rowSelection} 
                    dataSource={data}
                    columns={columns}
                    rowClassName="editable-row"
                    pagination={{
                    onChange: this.ancel,
                    }}
                />
            </EditableContext.Provider >
        );
    }
};

const EditableFormTable = Form.create()(EditableTable)

export default EditableFormTable